{"version":3,"sources":["api/index.js","components/Header.js","auth/index.js","components/UserPosts.js","components/UserTodos.js","index.js"],"names":["BASE","a","axios","get","data","userId","Header","currentUser","setCurrentUser","userList","useState","selectedUser","setSelectedUser","useEffect","className","onSubmit","event","preventDefault","to","activeClassName","onClick","localStorage","removeItem","username","onChange","id","target","value","user","find","map","setItem","JSON","stringify","UserPosts","userPosts","title","body","UserTodos","userTodos","completed","style","textDecoration","App","setUserList","parse","getItem","setUserPosts","setUserTodos","getUsers","then","users","catch","error","console","getPostsByUser","posts","getTodosByUser","todos","path","exact","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31902957.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BASE = 'https://jsonplace-univclone.herokuapp.com'\n\nexport async function getUsers() {\n  try {\n    const { data } = await axios.get(`${ BASE }/users`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getPostsByUser(userId) {\n  try {\n    const { data } = await axios.get(`${ BASE }/users/${ userId }/posts`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getTodosByUser(userId) {\n  try {\n    const { data } = await axios.get(`${ BASE }/users/${ userId }/todos`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nimport {\n  storeCurrentUser,\n  clearCurrentUser\n} from '../auth';\n\nimport './Header.css';\n\n\n/* CONDITIONAL RENDERING NOTES: */\n    /* We can interpolate any valid JS inside our JSX templates, you can use things like ternaries to add conditionals to templates\n    \n    EG.\n\n    {\n  isAdmin\n  ? <AdminPanel />\n  : <NonAdminPanel />\n}\n\n\n    Depending on the value of isAdmin, we will either create and render the AdminPanel or NonAdminPanel components.\n\n\n    EG.\n\n    {\n  isAdmin\n  ? <>\n      <AdminPanel />\n      <SecretAccess />\n    </>\n  : <NonAdminPanel />\n}\n\n    Each branch needs to follow the ONLY ONE ROOT rule, so to render multiple things, we can wrap them in a single root.  We use a dummy root pair, <></> in this case, but you can use a <div> etc\n\n    */\n\n/* Header component loops over the userList and builds the select dropdown */\n/* At this PointerEvent, we need to get users into userList */\n\n/* First we create a piece of local state for our form. Then, we create an effect that depends on the value of userList. This effect will run when the component is created, and will re-run when our App finishes its own effect.\n */\n\n/* That second time will set the default selectedUser to the first one in our dropdown. */\n\n/* Then, in our handleSelectChange we have updated the selectedUser to be the one whose id matches the value of the select change target. */\n\n/* Lastly, depending on if a user is logging in or logging out we update the value of currentUser by calling setCurrentUser either on selectedUser or null. */\n\n/* If you use the log in and log out features you should see that we can, in fact, update the value of currentUser and that the form updates accordingly. */\n\nconst Header = ({\n  currentUser,\n  setCurrentUser,\n  userList \n}) => {\n  const [selectedUser, setSelectedUser] = useState();\n\n  useEffect(() => {\n    setSelectedUser(userList[0]);\n  }, [userList]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n  }\n\n  const handleSelectChange = (event) => {\n    const id = event.target.value;\n    const user = userList.find(user => user.id == id);\n    setSelectedUser(user);\n  }\n\n  const handleUserLogin = (event) => {\n    storeCurrentUser(selectedUser);\n    setCurrentUser(selectedUser);\n  }\n\n  const handleUserLogout = (event) => {\n    setSelectedUser(userList[0]);\n    clearCurrentUser();\n    setCurrentUser(null);\n  }\n\n  return (\n    <header>\n      <h1>Welcome to UserHub</h1>\n      <form \n        className=\"user-select\" \n        onSubmit={ handleSubmit } >\n        {\n          currentUser\n          ? <> \n              <NavLink to=\"/posts\" activeClassName=\"current\">POSTS</NavLink>\n              <NavLink to=\"/todos\" activeClassName=\"current\">TODOS</NavLink >\n              <button onClick={ handleUserLogout }>LOG OUT, { currentUser.username }</button>\n            </>\n          : <>\n              <select onChange={ handleSelectChange }>{\n                userList.map(user => (\n                  <option key={ user.id } value={ user.id }>\n                    { user.username }\n                  </option>\n                ))\n              }</select>\n              <button onClick={ handleUserLogin }>LOG IN</button>\n            </>\n        }\n      </form>\n    </header>\n  );\n}\n\nexport default Header;","export function storeCurrentUser(user) {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n  }\n  \n  export function getCurrentUser() {\n    const user = JSON.parse(localStorage.getItem('currentUser'));\n    return user;\n  }\n  \n  export function clearCurrentUser() {\n    localStorage.removeItem('currentUser');\n  }","import React from 'react';\n\nimport './UserPosts.css';\n\nconst UserPosts = ({\n  currentUser,\n  userPosts\n}) => {\n  return (\n    <div className=\"user-posts\">\n      <h2>Posts By { currentUser.username }</h2>\n      {userPosts.map(({ id, title, body}) => (\n        <div key={ id } className=\"post\">\n          <h3>{ title }</h3>\n          <p>{ body }</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default UserPosts;","import React from 'react';\n\nimport './UserTodos.css';\n\nconst UserTodos = ({\n  currentUser,\n  userTodos\n}) => {\n  return (\n    <div className=\"user-todos\">\n      <h2>Todos By { currentUser.username }</h2>\n      {userTodos.map(({ id, title, completed }) => (\n        <div key={ id } className=\"todo\">\n          <h3 style={{\n            textDecoration: completed ? 'line-through' : 'none'\n          }}>{ title }</h3>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default UserTodos;","/* useEffect is a react hook which lets us run a function with \"side-effects\" (in this case, updating state after making an AJAX call) */\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\n/* We import getUsers from /.api to be able to make the AJAX call for the users inside our main application */\nimport { getUsers, getPostsByUser, getTodosByUser } from './api'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n\nimport {\n  Header,\n  UserPosts,\n  UserTodos\n} from './components';\n\nimport {\n  getCurrentUser\n} from './auth';\n\n/* DATA FLOW: */\n    /* In main App coomponent, we initialize a piece of state called userList, and set it equal to empty array [] */\n    /* App component calls the Header component, passing the userList along */\n    /* We place the userList prop in the Header component */\n\n    /* We use useState to make currentUser and setCurrentUser and pass them into the header */\n\n    const App = () => {\n    const [userList, setUserList] = useState([]);\n    const [currentUser, setCurrentUser] = useState(getCurrentUser() );\n    const [userPosts, setUserPosts] = useState([]);\n    const [userTodos, setUserTodos] = useState([]);\n\n    /* useEffect takes two main parameters: an effect function tht will be run, and an array of dependencies (state or props)  */\n\n    /* useEffect has code thats run when the component is created. We call getUsers (API method), and in its callbacks we update the userList state based on the result (the effect) */\n\n    /* The array of dependencies is a state or props you care about such that, if any of them change, we rerun the useEffect function (since it doesnt depend on any prop or state to be run)*/\n\n    /* When App is created, that callback is run. When it comes back it updates the userList, and that update will cause <Header> to re-render since userList is one of its props*/ \n\n\n\n    useEffect(() => {\n      getUsers()\n        .then(users => {\n          setUserList(users)\n        })\n        .catch(error => {\n          // something something errors\n          console.error(error);\n        });\n    }, []);\n\n    /* Here we create a new state for the userPosts, and a new effect */\n    /* Whenever the value of currentUser changes (via login/logout), we run this effect - we either */\n      /* set userPosts to an empty array (if no currentUser) , or we make a call to the API and set userPosts to the return*/\n      /* value of that if ther is a currentUser */\n\n      /* Lastly we use conditional rendering to show the PostList component only if there is a currentUser set. */\n\n      \n\n    useEffect(() => {\n      if (!currentUser) {\n        setUserPosts([]);\n        setUserTodos([]);\n        return;\n      }\n  \n      getPostsByUser(currentUser.id)\n        .then(posts => {\n          setUserPosts(posts);\n        })\n        .catch(error => {\n          console.error(error)\n        });\n\n    getTodosByUser(currentUser.id)\n      .then(todos => {\n        setUserTodos(todos);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [currentUser]);\n\n  return (\n    <Router>\n    <div id=\"App\">\n      <Header\n        userList={ userList }\n        currentUser={ currentUser }\n        setCurrentUser={ setCurrentUser } />\n      {\n          currentUser\n          ? <>\n              <Switch>\n                <Route path=\"/posts\">\n                  <UserPosts\n                    userPosts={ userPosts }\n                    currentUser={ currentUser } />\n                </Route>\n                <Route path=\"/todos\">\n                  <UserTodos\n                    userTodos={ userTodos }\n                    currentUser={ currentUser } />\n                </Route>\n                <Route exact path=\"/\">\n                  <h2 style={{\n                    padding: \".5em\"\n                  }}>Welcome, { currentUser.username }!</h2>\n                </Route>\n                <Redirect to=\"/\" />\n              </Switch>\n            </>\n          : <>\n              <Switch>\n                <Route exact path=\"/\">\n                  <h2 style={{\n                    padding: \".5em\"\n                  }}>Please log in, above.</h2>\n                </Route>\n                <Redirect to=\"/\" />\n              </Switch>\n            </>\n        }\n\n    </div>\n    </Router>\n  );\n}\n\n/* we render both the UserPosts and UserTodos whenever anyone logs in. */\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n\n/* REACT ROUTER\nThe next package we will use is called React Router. This comes with a number of existing components we can use in our application:\n\nBrowserRouter, which we wrap the entire application with, enables routing for any components inside of it\nRoute which conditionally renders any children if the path matches its path attribute\nLink and NavLink which provide a nice way to create links that work with our current router\nSwitch which provides a way to ensure we only match exactly one route */"],"sourceRoot":""}